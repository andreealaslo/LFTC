nonterminals={program,statementList,statement,declaration,assignmentStatement,ifStatement,whileStatement,function,callStatement,inputStatement,outputStatement,decl,type,simpleTypes,typesLocal,userDefinedTypes,operator,expression,condition,relation,assignmentStatementRHS,elseStatement,declRHS,listOfIdentifiers,listOfIdentifiersRHS}
terminals={.,;,INT,FLOAT,LONG,DOUBLE,CHAR,STRING,BOOL,LOCAL,ARRAY,definesteTu,decideDaca,dacaNU,catTimp,functie,apel,scrie,citeste,->,(,),[,],{,},',+,-,*,/,%,//,++,--,=,!=,<,>,<=,>=,==,===,EPSILON,identifier,constant}
startingSymbol=program
productions={program->statementList$statementList->EPSILON|statement statementList$statement->declaration|assignmentStatement|ifStatement|whileStatement|function|callStatement|inputStatement|outputStatement$declaration->type identifier .$decl->type identifier declRHS$declRHS->EPSILON|; decl$type->simpleTypes|typesLocal|userDefinedTypes$simpleTypes->INT|FLOAT|LONG|DOUBLE|CHAR|STRING|BOOL|ARRAY$typesLocal->LOCAL simpleTypes$userDefinedTypes->definesteTu identifier .$assignmentStatement->type identifier = assignmentStatementRHS$assignmentStatementRHS->expression .|inputStatement .|identifier .|constant .$ifStatement->decideDaca [ condition ] -> statement elseStatement$elseStatement->EPSILON|dacaNU -> statement$whileStatement->catTimp ( condition ) { statementList }$function->functie identifier ( decl ) { statementList }$callStatement->apel identifier ( listOfIdentifiers ) .$listOfIdentifiers->EPSILON|identifier|listOfIdentifiersRHS$listOfIdentifiersRHS->EPSILON|, identifier$outputStatement->scrie ( ' string ' ; identifier ) .$inputStatement->citeste ( ' string ' ) .$expression->identifier operator identifier$operator->+|-|*|/|%|//|++|--$condition->expression relation expression$relation->=|!=|<|>|<=|>=|==|===}

