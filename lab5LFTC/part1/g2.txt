nonterminals={program,statementList,statement,declaration,assignmentStatement,ifStatement,whileStatement,function,callStatement,inputStatement,outputStatement,decl,type,simpleTypes,arrayTypes,userDefinedTypes,function,operand,expression,condition,relation}
terminals={.,;,INT,FLOAT,LONG,DOUBLE,CHAR,STRING,BOOL,LOCAL INT,LOCAL FLOAT,LOCAL LONG,LOCAL DOUBLE,LOCAL CHAR,LOCAL BOOL,LOCAL STRING,ARRAY,LOCAL ARRAY,definesteTu,decideDaca,dacaNU,catTimp,functie,apel,scrie,citeste,->,(,),[,],{,},',+,-,*,/,%,//,++,--,=,!=,<,>,<=,>=,==,===}
startingSymbol=program
productions={program->statementList$statementList->statement statementList$statement->declaration|assignmentStatement|ifStatement|whileStatement|function|callStatement|inputStatement|outputStatement$declaration->type identifier.$decl->type identifier|type identifier;decl$type->simpleTypes|arrayTypes|userDefinedTypes$simpleTypes->INT|FLOAT|LONG|DOUBLE|CHAR|STRING|BOOL|LOCAL INT|LOCAL FLOAT|LOCAL LONG|LOCAL DOUBLE|LOCAL CHAR|LOCAL STRING|LOCAL BOOL$arrayTypes->ARRAY|LOCAL ARRAY$userDefinedTypes->definesteTu identifier.$assignmentStatement->type identifier= expression.|type identifier= inputStatement.|type identifier= identifier.|type identifier= constant.$ifStatement->decideDaca[condition]->statement|decideDaca[condition]->statement dacaNU->statement$whileStatement->catTimp(condition){statementList}$function->functie identifier(decl){statementList}$callStatement->apel functie.$outputStatement->scrie ('string';identifier).$inputStatement->citeste('string').$expression->expression operand expression|(expression operand expression)|expression operand constant|expression operand identifier|identifier operand identifier|identifier operand constant$operand->+|-|*|/|%|//|++|--$condition->expression relation expression$relation->=|!=|<|>|<=|>=|==|===}

